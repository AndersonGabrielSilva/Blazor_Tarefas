@inject IJSRuntime js

<h3>@Titulo</h3>

<table class="table">
    <thead>
        <tr>
            <th>Ação</th>
            <th>Data</th>
            <th>Descrição</th>
            <th>Concluida</th>
        </tr>
    </thead>S
    <tbody>
        <ListaGenerica ListaItem="lstTarefas">
            <Lista Context="Tarefa">
                @* Este context representa cada elemento da minha Lista de Item *@
                <TarefaIndividual item="Tarefa" RemoverTarefa="RemoveTarefa" />
            </Lista>
        </ListaGenerica>
    </tbody>
</table>

<Confirma @ref="confirmacao" onCancela="CancelaConfirmacao"
          onConfirma="RemoverTarefaConfirmacao">
    <div>Deseja Excluir esta tarefa ?</div>
</Confirma>

@if (lstTarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="number" placeholder="Informe o codigo" @bind="codigo" />
        <input type="text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}

@code{

    [Parameter]
    public List<Tarefa> lstTarefas { get; set; }

    [Parameter]
    public string Titulo { get; set; }

    //instancia do componente Confirma 
    Confirma confirmacao;

    Tarefa tarefaRemover;


    static int totalTarefas = 0;
    async Task AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa) && codigo != 0)
        {
            lstTarefas.Add(new Tarefa()
            {
                Id = codigo,
                Descricao = novaTarefa,
                DataCriacao = DateTime.Now
            });

            novaTarefa = "";
            totalTarefas = lstTarefas.Count();

            //await js.InvokeVoidAsync("getTotalTarefas");
            await js.InvokeAsync<int>("getTotalTarefasIntancia", DotNetObjectReference.Create(this));
        }
    }

    //Decorando com o JsInvocable para ser possivel chamar um metodo estatico via js
    [JSInvokable]
    public static Task<int> ObterTotalTarefa()
    {
        return Task.FromResult(totalTarefas);
    }

    [JSInvokable]
    public Task<int> ObterTotalTarefasInstancia()
    {
        return Task.FromResult(totalTarefas);
    }


    private async Task RemoveTarefa(Tarefa tarefa)
    {

        confirmacao.Exibir();
        tarefaRemover = tarefa;
        //var tarefaRemover = lstTarefas.First(x => x.Id == tarefa.Id);
        //lstTarefas.Remove(tarefaRemover);

        //Maneira de utilizar o Jsruntime de forma sincrona
        var result = ((IJSInProcessRuntime)js).Invoke<bool>("confirm","Excluir tarefa");

        //Maneira de utilizar o Jsruntime de forma Assincrona
        //var result = await js.InvokeAsync<bool>("confirm","Excluir tarefa");

        if (result)
        {
            lstTarefas.Remove(tarefa);
            //await js.InvokeVoidAsync("MostraAlerta", "Tarefa excluida com sucesso");
            await js.InvokeAsync<object>("MostraAlerta", "Tarefa excluida com sucesso");
        }
    }

    void RemoverTarefaConfirmacao()
    {
        lstTarefas.Remove(tarefaRemover);
        tarefaRemover = null;
        confirmacao.Ocultar();
    }

    void CancelaConfirmacao()
    {
        confirmacao.Ocultar();
        tarefaRemover = null;
    }


    private string novaTarefa = string.Empty;
    private int codigo = 0;



}

@*   CÓDIGO ANTIGO UTILIZADO ANTES DO RENDERFRAGMENT GENERICO
    <!--@if (lstTarefas == null)
    {
        <Alerta>-->
            <span style="color: red"> Carregando tarefas...</span>*@@*Utilizado quando há apenas um elemento a ser renderizado
            <!--<Conteudo1>
                <img src="https://media.giphy.com/media/xTk9ZvMnbIiIew7IpW/giphy.gif" />
                <h1>Aguarde...</h1>
            </Conteudo1>
            <Conteudo2>
                <h2>Carregando...</h2>
            </Conteudo2>
        </Alerta>
        <p>Carregando....</p>
    }
    else if (!lstTarefas.Any())
    {
        <Alerta>
            <Conteudo1>
                <img src="https://media.giphy.com/media/l1J3OrWuIpDdWxvCo/giphy.gif" />
                <h1>Ainda não existem registros</h1>
            </Conteudo1>
            <Conteudo2>
                <h2>Inclua algumas tarefas</h2>
            </Conteudo2>
        </Alerta>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Ação</th>
                    <th>Data</th>
                    <th>Descrição</th>
                    <th>Concluida</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in lstTarefas)
                {
                    <tr>
                        <TarefaIndividual item="item" RemoverTarefa="RemoveTarefa" />
                    </tr>
                }
            </tbody>
        </table>
    }-->
            *@